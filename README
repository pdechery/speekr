

## Planning

### Questions

- Replying is allowed to any user or only those I follow?
- We already have a limit to five posts a day per user. Replies will fit in this rule?
- In the template page, I suppose we'll have to do a thread-like layout. It's more complex and some frontend design would be needed.
- Should we have some moderation, in case of SPAM or offensive replies? Or hate-speech? 

### Assumptions

These replies should be reached only from the profile page. Be it the auth user or some user profile he's accessing. We could use a a tab, and the data should be loaded asynchronously.

I'd do a new model in Django to persist the replies, with a Many to One relation with the post.

Fields would be: reply, user who made it, date and particular post.

## Critique

There must be a better organization in the backend's classes. Right now all the models live in the same file, for example.

The whole code base should be refactored to allow isolation of entities, so we all could benefit from better maintenance.

The frontend also suffer from this same problem, and a lot of code is repeated. I'd use also Vue's build system as well as research other solutions proposed by this framework to allow better organization and separation of responsibilites.

I'd stick to Vue since I think it's a mature enough framework to build this app. But I'd be open for debate.

As for infrastructure, the database queries could be improved but the piority should be have some caching service, to keep all data in Home, for instance. This could be Redis, or even Django caching solution itself. I'd have to study the existing solutions deeplier to propose something.

Since this test uses django built-in webserver, obviously we should move to a real webserver, like Nginx, and have a paaS service to support auto-scaling. Stress tests would help to identify the app's real needs. The Locust package could help with that.









